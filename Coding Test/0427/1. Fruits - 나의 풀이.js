/*
[문제 설명]
 길 위에 사과나무와 오렌지 나무가 있습니다.
 사과 열매 하나당 1점, 오렌지 열매 하나당 -1점이라고 할 때,
 길 위의 연속으로 이어진 나무에서 얻을 수 있는 최고 점수를 구하는 함수, solution을 완성해주세요.

 예를 들어, 길 위에 있는 나무의 열매 중 사과 열매의 수는 양수로, 오렌지 열매 수는 음수로 표현된
 fruits [-2, 5, -3, 6, 8, -1, -5, 3]가 있을 때 얻을 수 있는 최고 점수는
 2번째부터 5번째까지 수확했을 때 점수인 16점(5 - 3 + 6 + 8) 입니다.

[제한 사항]
 - 열매 수확은 띄엄띄엄할 수 없으며, 연속된 나무의 모든 열매를 수확해야 합니다.
 - 사과 열매 하나는 1점, 오렌지 열매 하나는 -1점입니다.
 - 최소한 하나의 나무의 열매는 수확해야 합니다.

[입력 형식]
 - 길 위에 과일의 점수를 나타낸 fruits가 주어집니다.
 - fruits는 -1000 이상 1000 이하의 정수로 이루어진 배열입니다.
 - 길 위의 나무의 수는 1개 이상 10,000개 이하입니다.

[출력 형식]
 - 길 위의 연속으로 이어진 나무에서 얻을 수 있는 최고 점수를 출력합니다.
*/

// dp문제의 대표! 연속합 문제!
function solution(fruits) {
  // 현재 인덱스까지 이어지는 연속합의 최대값을 저장할 배열 dp
  let dp = [];
  // 0번 인덱스에서 얻을 수 있는 최고 점수는 0번 인덱스에 해당하는 점수와 0 중 큰 값
  dp[0] = Math.max(fruits[0], 0);
  for (let i = 1; i < fruits.length; i++) {
    // 연속을 이어갈지(지금까지의 점수에 현재 위치에 해당하는 점수를 더하는 것이 이득)
    // 새로운 연속을 시작할지(지금까지의 점수를 무시하고 현재 위치에 해당하는 점수만 고려하는 것이 이득)
    dp[i] = Math.max(dp[i - 1] + fruits[i], fruits[i]);
  }
  // 각 인덱스까지 이어지는 연속합의 최대값 중 최대값 반환
  return Math.max(...dp);
}

// 점수: 1.0/1.0
