/*
n 층의 피라미드의 꼭대기에서 1층으로 내려와 탈출하려고 합니다.
피라미드에는 방이 있으며, n 층에는 1개의 방이 존재하고,
n-1 층에는 2개의 방, n-2 층에는 3개의 방, 1층에는 n개의 방이 존재합니다.
각 방은 왼쪽 아래와 오른쪽 아래의 방으로 이동하는 계단이 있고, 각 방에는 j개의 보석이 존재합니다.
n 층의 피라미드 각 방에 존재하는 보석의 정보 arr가 주어질 때,
꼭대기 층에서 1층까지 내려오면서 모을 수 있는 보석의 최대 수를 구하는 함수, solution을 완성해주세요.
예를 들어, 3층의 피라미드 각 방에 존재하는 보석의 정보
arr [[3], [5, 10], [4, 8, 6]]이 주어질 때,
피라미드를 탈출하며 모들 수 있는 보석의 최대 수는 다음과 같습니다.
> 3 + 10 + 8 = 21
*/

// 피라미드 바닥부터 거꾸로 올라간다고 생각!
// 바닥이 아닌 i층 j번째 방까지 올라가는 동안 얻을 수 있는 보석의 최대 수는
// i-1층 j번째 방(왼쪽 아래 방)까지 올라가는 동안 얻을 수 있는 보석의 최대 수와
// i-1층 j+1번째 방(오른쪽 아래 방)까지 올라가는 동안 얻을 수 있는 보석의 최대 수 중 최댓값에
// i층 j번째 방에 있는 보석의 수를 더한 것!
function solution(arr) {
  let n = arr.length;
  // 바닥에서 두 번째 층부터 꼭대기 층까지 거슬러 올라가면서 순회
  for (let i = n - 2; i >= 0; i--) {
    // 각 층의 가장 왼쪽 방부터 가장 오른쪽 방까지 순회
    for (let j = 0; j < arr[i].length; j++) {
      // arr[i][j]는 현재 있는 방까지 오면서 얻을 수 있는 보석의 최대 수
      // (현재 방의 보석의 수 + 왼쪽 아래/오른쪽 아래 방까지 오면서 얻을 수 있는 보석의 수 중 최댓값)
      arr[i][j] += Math.max(arr[i + 1][j], arr[i + 1][j + 1]);
    }
  }
  return arr[0][0];
}

// 점수: 1.0/1.0
