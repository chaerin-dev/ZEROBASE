/*
정수 n이 주어집니다. 1부터 n까지의 정수를 각각 이진수로 나타내었을 때,
1이 등장하는 두 번째 최상위 비트 자리의 수를 모두 더하여 출력하시오.
예를 들어, 131을 이진수로 나타내면 10000011이고,
최상위 비트는 2^7인 128이며,두 번째 최상위 비트는 2^1인 2입니다.
만약 4와 같이 이진수로 나타내었을 때 1이 단 한 번만 나타나는 수의 경우에는 0을 더합니다.
만약 n이 6으로 주어진다고 가정할 때, 두 번째 최상위 비트의 자릿수를 모두 더한 결과는 다음과 같습니다.
> 숫자 1의 비트 `1`에서 두 번째 최상위 비트는 없으므로 0입니다.
> 숫자 2의 비트 `10`에서 두 번째 최상위 비트는 없으므로 0입니다.
> 숫자 3의 비트 `11`에서 두 번째 최상위 비트의 수는 2^0이므로 1입니다.
> 숫자 4의 비트 `100`에서 두 번째 최상위 비트는 없으므로 0입니다.
> 숫자 5의 비트 `101`에서 두 번째 최상위 비트의 수는 2^0이므로 1입니다.
> 숫자 6의 비트 `110`에서 두 번째 최상위 비트의 수는 2^1이므로 2입니다.
> 결과 : 4
*/

function solution(n) {
  // 결과를 저장할 변수 sum
  let sum = 0;
  // 1부터 n까지의 각 정수에 대해
  for (let i = 1; i <= n; i++) {
    // 해당 정수를 2진수로 변환한 문자열을 변수 str에 저장
    str = i.toString(2);
    // 두 번째 1의 인덱스(첫 번째 1의 위치 직후부터 또다른 1의 위치 탐색)를 변수 second_1에 저장
    let second_1 = str.indexOf("1", str.indexOf("1") + 1);
    // 1이 두 개 이상이면(첫 번째 1의 위치 이후에 또다른 1이 존재하면)
    if (second_1 != -1) {
      // 해당 1의 자리수를 sum에 더해줌
      sum += 2 ** (str.length - second_1 - 1);
    }
  }
  return sum;
}

// 점수: 1.0/1.0
